name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting (if available)
      run: |
        # Uncomment when linting is configured
        # pip install flake8 black isort
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # black --check .
        # isort --check-only .
        echo "Linting step placeholder"
    
    - name: Run unit tests with coverage
      run: |
        python -m pytest tests/unit/ --cov=. --cov-report=xml --cov-report=term-missing -v
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v -x
    
    - name: Run end-to-end tests
      run: |
        python -m pytest tests/e2e/ -v -x
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  performance-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance tests
      run: |
        python -m pytest tests/integration/test_performance.py -v -m "not slow"
    
    - name: Run slow performance tests (if needed)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        python -m pytest tests/integration/test_performance.py -v -m "slow"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        # pip install safety bandit
        # safety check -r requirements.txt
        # bandit -r . -x tests/
        echo "Security scan placeholder"